package lamport;

import java.awt.Color;
import java.awt.Graphics;

public class Lienzo extends javax.swing.JPanel {

    private int numVectores;
    private int numTiempos;
    private int[][] timeStamp;
    private int posXEmisor;
    private int posYEmisor;
    private int posXReceptor;
    private int posYReceptor;
    private static int ancho = 35;
    private static int alto = 250;
    private boolean graficar_flecha;

    /** Creates new form Lienzo */
    public Lienzo() {
        initComponents();
        posXEmisor   = new Integer(-1);
        posYEmisor   = new Integer(-1);
        posXReceptor = new Integer(-1);
        posYReceptor = new Integer(-1);
        graficar_flecha = false;
    }

    public void setNumTiempos(int numTiempos) {
        this.numTiempos = numTiempos;
    }

    public void setNumVectores(int numVectores) {
        this.numVectores = numVectores;
    }

    public void setTimeStamp(int[][] timeStamp) {
        this.timeStamp = timeStamp;
    }
    
    @Override
    public void paint(Graphics g){
        int x = 10;
        int y = 10;
        int xx,yy;
        int flag = 0;
        int xxo=0, yyo=0, xxf=0, yyf=0;
        for(int i = 0; i<numVectores; i++){
            g.setColor(Color.MAGENTA);
            g.drawString("P" + i, x+(ancho/2)-1, 8);
            g.setColor(Color.BLACK);
            g.drawRect(x,10,ancho,alto);
            for(int j = 0; j<numTiempos; j++){
                xx = x + 11;
                yy = y + 17;
                if(i == posXEmisor && j == posYEmisor){
                    if(graficar_flecha) {
                        g.setColor(Color.BLUE);
                        flag = 0;
                    }
                }
                else if(i == posXReceptor && j == posYReceptor){
                    if(graficar_flecha) {
                        g.setColor(Color.RED);
                        flag = 1;
                    }
                } else {
                    flag = 2;
                }
                g.drawString(Integer.toString(timeStamp[i][j]),xx,yy);
                if(flag==0) {
                    xxo=xx;
                    yyo=yy;
                } else if(flag==1) {
                    xxf=xx;
                    yyf=yy;
                }
                g.setColor(Color.BLACK);
                g.drawLine(x,y,x+ancho,y);
                y = y + 25;
            }
            x = x + 70;
            y = 10;
        }
        if(graficar_flecha) {
            g.setColor(new Color(0,140,0));
            paintArrow(g, xxo, yyo, xxf, yyf);
        }
    }

    private void paintArrow(Graphics g, int x0, int y0, int x1,int y1){
 int deltaX = x1 - x0;
 int deltaY = y1 - y0;
 double frac = 0.03;

 g.drawLine(x0,y0,x1,y1);
 g.drawLine(x0 + (int)((1-frac)*deltaX + frac*deltaY),
     y0 + (int)((1-frac)*deltaY - frac*deltaX),
     x1, y1);
 g.drawLine(x0 + (int)((1-frac)*deltaX - frac*deltaY),
     y0 + (int)((1-frac)*deltaY + frac*deltaX),
     x1, y1);

    }

    public void setGraficar_flecha(boolean graficar_flecha) {
        this.graficar_flecha = graficar_flecha;
    }

    public void setProcesos(int numProc, int[][] tiempos){
        numVectores = numProc;
        timeStamp = tiempos;
    }

    public void setVector(int x1,int y1, int x2, int y2){
        posXEmisor   = x1;
        posYEmisor   = y1;
        posXReceptor = x2;
        posYReceptor = y2;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    // End of variables declaration                   

}